/* automatically generated by rust-bindgen */

pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const __bool_true_false_are_defined: u32 = 1;
pub const false_: u32 = 0;
pub const true_: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _DOMAIN: u32 = 1;
pub const _SING: u32 = 2;
pub const _OVERFLOW: u32 = 3;
pub const _UNDERFLOW: u32 = 4;
pub const _TLOSS: u32 = 5;
pub const _PLOSS: u32 = 6;
pub const _HUGE_ENUF : f64 = 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 ;
pub const _DENORM: i32 = -2;
pub const _FINITE: i32 = -1;
pub const _INFCODE: u32 = 1;
pub const _NANCODE: u32 = 2;
pub const FP_INFINITE: u32 = 1;
pub const FP_NAN: u32 = 2;
pub const FP_NORMAL: i32 = -1;
pub const FP_SUBNORMAL: i32 = -2;
pub const FP_ZERO: u32 = 0;
pub const _C2: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: u32 = 2147483647;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const _FE_DIVBYZERO: u32 = 4;
pub const _FE_INEXACT: u32 = 32;
pub const _FE_INVALID: u32 = 1;
pub const _FE_OVERFLOW: u32 = 8;
pub const _FE_UNDERFLOW: u32 = 16;
pub const _D0_C: u32 = 3;
pub const _D1_C: u32 = 2;
pub const _D2_C: u32 = 1;
pub const _D3_C: u32 = 0;
pub const _DBIAS: u32 = 1022;
pub const _DOFF: u32 = 4;
pub const _F0_C: u32 = 1;
pub const _F1_C: u32 = 0;
pub const _FBIAS: u32 = 126;
pub const _FOFF: u32 = 7;
pub const _FRND: u32 = 1;
pub const _L0_C: u32 = 3;
pub const _L1_C: u32 = 2;
pub const _L2_C: u32 = 1;
pub const _L3_C: u32 = 0;
pub const _LBIAS: u32 = 1022;
pub const _LOFF: u32 = 4;
pub const _FP_LT: u32 = 1;
pub const _FP_EQ: u32 = 2;
pub const _FP_GT: u32 = 4;
pub const DOMAIN: u32 = 1;
pub const SING: u32 = 2;
pub const OVERFLOW: u32 = 3;
pub const UNDERFLOW: u32 = 4;
pub const TLOSS: u32 = 5;
pub const PLOSS: u32 = 6;
pub const SP_RENDER_SCALE: f64 = 100000.0;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn();
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    );
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_pctype as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_mb_cur_max as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_lc_codepage as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_lc_codepage)
        )
    );
}
impl Default for __crt_locale_data_public {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).locinfo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).mbcinfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(mbcinfo)
        )
    );
}
impl Default for __crt_locale_pointers {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Wchar as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Wchar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Byte as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Byte)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._State as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_State)
        )
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct _exception {
    pub type_: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
#[test]
fn bindgen_test_layout__exception() {
    assert_eq!(
        ::std::mem::size_of::<_exception>(),
        40usize,
        concat!("Size of: ", stringify!(_exception))
    );
    assert_eq!(
        ::std::mem::align_of::<_exception>(),
        8usize,
        concat!("Alignment of ", stringify!(_exception))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_exception>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_exception),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_exception>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_exception),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_exception>())).arg1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_exception),
            "::",
            stringify!(arg1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_exception>())).arg2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_exception),
            "::",
            stringify!(arg2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_exception>())).retval as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_exception),
            "::",
            stringify!(retval)
        )
    );
}
impl Default for _exception {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct _complex {
    pub x: f64,
    pub y: f64,
}
#[test]
fn bindgen_test_layout__complex() {
    assert_eq!(
        ::std::mem::size_of::<_complex>(),
        16usize,
        concat!("Size of: ", stringify!(_complex))
    );
    assert_eq!(
        ::std::mem::align_of::<_complex>(),
        8usize,
        concat!("Alignment of ", stringify!(_complex))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_complex>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_complex),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_complex>())).y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_complex),
            "::",
            stringify!(y)
        )
    );
}
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub static _HUGE: f64;
}
extern "C" {
    pub fn _fperrraise(_Except: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _dclass(_X: f64) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ldclass(_X: f64) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdclass(_X: f32) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dsign(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ldsign(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fdsign(_X: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _dpcomp(_X: f64, _Y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ldpcomp(_X: f64, _Y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fdpcomp(_X: f32, _Y: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _dtest(_Px: *mut f64) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ldtest(_Px: *mut f64) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdtest(_Px: *mut f32) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _d_int(_Px: *mut f64, _Xexp: ::std::os::raw::c_short) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ld_int(_Px: *mut f64, _Xexp: ::std::os::raw::c_short) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fd_int(_Px: *mut f32, _Xexp: ::std::os::raw::c_short) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dscale(_Px: *mut f64, _Lexp: ::std::os::raw::c_long) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ldscale(_Px: *mut f64, _Lexp: ::std::os::raw::c_long) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdscale(_Px: *mut f32, _Lexp: ::std::os::raw::c_long) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dunscale(_Pex: *mut ::std::os::raw::c_short, _Px: *mut f64) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ldunscale(_Pex: *mut ::std::os::raw::c_short, _Px: *mut f64)
        -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdunscale(_Pex: *mut ::std::os::raw::c_short, _Px: *mut f32)
        -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dexp(_Px: *mut f64, _Y: f64, _Eoff: ::std::os::raw::c_long) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ldexp(_Px: *mut f64, _Y: f64, _Eoff: ::std::os::raw::c_long)
        -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdexp(_Px: *mut f32, _Y: f32, _Eoff: ::std::os::raw::c_long)
        -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dnorm(_Ps: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdnorm(_Ps: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dpoly(_X: f64, _Tab: *const f64, _N: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn _ldpoly(_X: f64, _Tab: *const f64, _N: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn _fdpoly(_X: f32, _Tab: *const f32, _N: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn _dlog(_X: f64, _Baseflag: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn _ldlog(_X: f64, _Baseflag: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn _fdlog(_X: f32, _Baseflag: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn _dsin(_X: f64, _Qoff: ::std::os::raw::c_uint) -> f64;
}
extern "C" {
    pub fn _ldsin(_X: f64, _Qoff: ::std::os::raw::c_uint) -> f64;
}
extern "C" {
    pub fn _fdsin(_X: f32, _Qoff: ::std::os::raw::c_uint) -> f32;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _double_val {
    pub _Sh: [::std::os::raw::c_ushort; 4usize],
    pub _Val: f64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout__double_val() {
    assert_eq!(
        ::std::mem::size_of::<_double_val>(),
        8usize,
        concat!("Size of: ", stringify!(_double_val))
    );
    assert_eq!(
        ::std::mem::align_of::<_double_val>(),
        8usize,
        concat!("Alignment of ", stringify!(_double_val))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_double_val>()))._Sh as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_double_val),
            "::",
            stringify!(_Sh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_double_val>()))._Val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_double_val),
            "::",
            stringify!(_Val)
        )
    );
}
impl Default for _double_val {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for _double_val {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_double_val {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _float_val {
    pub _Sh: [::std::os::raw::c_ushort; 2usize],
    pub _Val: f32,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout__float_val() {
    assert_eq!(
        ::std::mem::size_of::<_float_val>(),
        4usize,
        concat!("Size of: ", stringify!(_float_val))
    );
    assert_eq!(
        ::std::mem::align_of::<_float_val>(),
        4usize,
        concat!("Alignment of ", stringify!(_float_val))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_float_val>()))._Sh as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_float_val),
            "::",
            stringify!(_Sh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_float_val>()))._Val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_float_val),
            "::",
            stringify!(_Val)
        )
    );
}
impl Default for _float_val {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for _float_val {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_float_val {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _ldouble_val {
    pub _Sh: [::std::os::raw::c_ushort; 4usize],
    pub _Val: f64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout__ldouble_val() {
    assert_eq!(
        ::std::mem::size_of::<_ldouble_val>(),
        8usize,
        concat!("Size of: ", stringify!(_ldouble_val))
    );
    assert_eq!(
        ::std::mem::align_of::<_ldouble_val>(),
        8usize,
        concat!("Alignment of ", stringify!(_ldouble_val))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ldouble_val>()))._Sh as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldouble_val),
            "::",
            stringify!(_Sh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ldouble_val>()))._Val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldouble_val),
            "::",
            stringify!(_Val)
        )
    );
}
impl Default for _ldouble_val {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for _ldouble_val {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_ldouble_val {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _float_const {
    pub _Word: [::std::os::raw::c_ushort; 4usize],
    pub _Float: f32,
    pub _Double: f64,
    pub _Long_double: f64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout__float_const() {
    assert_eq!(
        ::std::mem::size_of::<_float_const>(),
        8usize,
        concat!("Size of: ", stringify!(_float_const))
    );
    assert_eq!(
        ::std::mem::align_of::<_float_const>(),
        8usize,
        concat!("Alignment of ", stringify!(_float_const))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_float_const>()))._Word as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_float_const),
            "::",
            stringify!(_Word)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_float_const>()))._Float as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_float_const),
            "::",
            stringify!(_Float)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_float_const>()))._Double as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_float_const),
            "::",
            stringify!(_Double)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_float_const>()))._Long_double as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_float_const),
            "::",
            stringify!(_Long_double)
        )
    );
}
impl Default for _float_const {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl ::std::fmt::Debug for _float_const {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_float_const {{ union }}")
    }
}
extern "C" {
    pub static _Denorm_C: _float_const;
}
extern "C" {
    pub static _Inf_C: _float_const;
}
extern "C" {
    pub static _Nan_C: _float_const;
}
extern "C" {
    pub static _Snan_C: _float_const;
}
extern "C" {
    pub static _Hugeval_C: _float_const;
}
extern "C" {
    pub static _FDenorm_C: _float_const;
}
extern "C" {
    pub static _FInf_C: _float_const;
}
extern "C" {
    pub static _FNan_C: _float_const;
}
extern "C" {
    pub static _FSnan_C: _float_const;
}
extern "C" {
    pub static _LDenorm_C: _float_const;
}
extern "C" {
    pub static _LInf_C: _float_const;
}
extern "C" {
    pub static _LNan_C: _float_const;
}
extern "C" {
    pub static _LSnan_C: _float_const;
}
extern "C" {
    pub static _Eps_C: _float_const;
}
extern "C" {
    pub static _Rteps_C: _float_const;
}
extern "C" {
    pub static _FEps_C: _float_const;
}
extern "C" {
    pub static _FRteps_C: _float_const;
}
extern "C" {
    pub static _LEps_C: _float_const;
}
extern "C" {
    pub static _LRteps_C: _float_const;
}
extern "C" {
    pub static _Zero_C: f64;
}
extern "C" {
    pub static _Xbig_C: f64;
}
extern "C" {
    pub static _FZero_C: f32;
}
extern "C" {
    pub static _FXbig_C: f32;
}
extern "C" {
    pub static _LZero_C: f64;
}
extern "C" {
    pub static _LXbig_C: f64;
}
extern "C" {
    pub fn abs(_X: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(_X: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(_X: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn acos(_X: f64) -> f64;
}
extern "C" {
    pub fn asin(_X: f64) -> f64;
}
extern "C" {
    pub fn atan(_X: f64) -> f64;
}
extern "C" {
    pub fn atan2(_Y: f64, _X: f64) -> f64;
}
extern "C" {
    pub fn cos(_X: f64) -> f64;
}
extern "C" {
    pub fn cosh(_X: f64) -> f64;
}
extern "C" {
    pub fn exp(_X: f64) -> f64;
}
extern "C" {
    pub fn fabs(_X: f64) -> f64;
}
extern "C" {
    pub fn fmod(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn log(_X: f64) -> f64;
}
extern "C" {
    pub fn log10(_X: f64) -> f64;
}
extern "C" {
    pub fn pow(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn sin(_X: f64) -> f64;
}
extern "C" {
    pub fn sinh(_X: f64) -> f64;
}
extern "C" {
    pub fn sqrt(_X: f64) -> f64;
}
extern "C" {
    pub fn tan(_X: f64) -> f64;
}
extern "C" {
    pub fn tanh(_X: f64) -> f64;
}
extern "C" {
    pub fn acosh(_X: f64) -> f64;
}
extern "C" {
    pub fn asinh(_X: f64) -> f64;
}
extern "C" {
    pub fn atanh(_X: f64) -> f64;
}
extern "C" {
    pub fn atof(_String: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn _atof_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _cabs(_Complex_value: _complex) -> f64;
}
extern "C" {
    pub fn cbrt(_X: f64) -> f64;
}
extern "C" {
    pub fn ceil(_X: f64) -> f64;
}
extern "C" {
    pub fn _chgsign(_X: f64) -> f64;
}
extern "C" {
    pub fn copysign(_Number: f64, _Sign: f64) -> f64;
}
extern "C" {
    pub fn _copysign(_Number: f64, _Sign: f64) -> f64;
}
extern "C" {
    pub fn erf(_X: f64) -> f64;
}
extern "C" {
    pub fn erfc(_X: f64) -> f64;
}
extern "C" {
    pub fn exp2(_X: f64) -> f64;
}
extern "C" {
    pub fn expm1(_X: f64) -> f64;
}
extern "C" {
    pub fn fdim(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn floor(_X: f64) -> f64;
}
extern "C" {
    pub fn fma(_X: f64, _Y: f64, _Z: f64) -> f64;
}
extern "C" {
    pub fn fmax(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn fmin(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn frexp(_X: f64, _Y: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn hypot(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn _hypot(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn ilogb(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldexp(_X: f64, _Y: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn lgamma(_X: f64) -> f64;
}
extern "C" {
    pub fn llrint(_X: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llround(_X: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn log1p(_X: f64) -> f64;
}
extern "C" {
    pub fn log2(_X: f64) -> f64;
}
extern "C" {
    pub fn logb(_X: f64) -> f64;
}
extern "C" {
    pub fn lrint(_X: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lround(_X: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _matherr(_Except: *mut _exception) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn modf(_X: f64, _Y: *mut f64) -> f64;
}
extern "C" {
    pub fn nan(_X: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn nearbyint(_X: f64) -> f64;
}
extern "C" {
    pub fn nextafter(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn remainder(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn remquo(_X: f64, _Y: f64, _Z: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rint(_X: f64) -> f64;
}
extern "C" {
    pub fn round(_X: f64) -> f64;
}
extern "C" {
    pub fn scalbln(_X: f64, _Y: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn scalbn(_X: f64, _Y: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn tgamma(_X: f64) -> f64;
}
extern "C" {
    pub fn trunc(_X: f64) -> f64;
}
extern "C" {
    pub fn _j0(_X: f64) -> f64;
}
extern "C" {
    pub fn _j1(_X: f64) -> f64;
}
extern "C" {
    pub fn _jn(_X: ::std::os::raw::c_int, _Y: f64) -> f64;
}
extern "C" {
    pub fn _y0(_X: f64) -> f64;
}
extern "C" {
    pub fn _y1(_X: f64) -> f64;
}
extern "C" {
    pub fn _yn(_X: ::std::os::raw::c_int, _Y: f64) -> f64;
}
extern "C" {
    pub fn acoshf(_X: f32) -> f32;
}
extern "C" {
    pub fn asinhf(_X: f32) -> f32;
}
extern "C" {
    pub fn atanhf(_X: f32) -> f32;
}
extern "C" {
    pub fn cbrtf(_X: f32) -> f32;
}
extern "C" {
    pub fn _chgsignf(_X: f32) -> f32;
}
extern "C" {
    pub fn copysignf(_Number: f32, _Sign: f32) -> f32;
}
extern "C" {
    pub fn _copysignf(_Number: f32, _Sign: f32) -> f32;
}
extern "C" {
    pub fn erff(_X: f32) -> f32;
}
extern "C" {
    pub fn erfcf(_X: f32) -> f32;
}
extern "C" {
    pub fn expm1f(_X: f32) -> f32;
}
extern "C" {
    pub fn exp2f(_X: f32) -> f32;
}
extern "C" {
    pub fn fdimf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn fmaf(_X: f32, _Y: f32, _Z: f32) -> f32;
}
extern "C" {
    pub fn fmaxf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn fminf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn _hypotf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn ilogbf(_X: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lgammaf(_X: f32) -> f32;
}
extern "C" {
    pub fn llrintf(_X: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundf(_X: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn log1pf(_X: f32) -> f32;
}
extern "C" {
    pub fn log2f(_X: f32) -> f32;
}
extern "C" {
    pub fn logbf(_X: f32) -> f32;
}
extern "C" {
    pub fn lrintf(_X: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lroundf(_X: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nanf(_X: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn nearbyintf(_X: f32) -> f32;
}
extern "C" {
    pub fn nextafterf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn nexttowardf(_X: f32, _Y: f64) -> f32;
}
extern "C" {
    pub fn remainderf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn remquof(_X: f32, _Y: f32, _Z: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn rintf(_X: f32) -> f32;
}
extern "C" {
    pub fn roundf(_X: f32) -> f32;
}
extern "C" {
    pub fn scalblnf(_X: f32, _Y: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn scalbnf(_X: f32, _Y: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn tgammaf(_X: f32) -> f32;
}
extern "C" {
    pub fn truncf(_X: f32) -> f32;
}
extern "C" {
    pub fn _logbf(_X: f32) -> f32;
}
extern "C" {
    pub fn _nextafterf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn _finitef(_X: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isnanf(_X: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fpclassf(_X: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_FMA3_enable(_Flag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_FMA3_enable() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf(_X: f32) -> f32;
}
extern "C" {
    pub fn asinf(_X: f32) -> f32;
}
extern "C" {
    pub fn atan2f(_Y: f32, _X: f32) -> f32;
}
extern "C" {
    pub fn atanf(_X: f32) -> f32;
}
extern "C" {
    pub fn ceilf(_X: f32) -> f32;
}
extern "C" {
    pub fn cosf(_X: f32) -> f32;
}
extern "C" {
    pub fn coshf(_X: f32) -> f32;
}
extern "C" {
    pub fn expf(_X: f32) -> f32;
}
extern "C" {
    pub fn floorf(_X: f32) -> f32;
}
extern "C" {
    pub fn fmodf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn log10f(_X: f32) -> f32;
}
extern "C" {
    pub fn logf(_X: f32) -> f32;
}
extern "C" {
    pub fn modff(_X: f32, _Y: *mut f32) -> f32;
}
extern "C" {
    pub fn powf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn sinf(_X: f32) -> f32;
}
extern "C" {
    pub fn sinhf(_X: f32) -> f32;
}
extern "C" {
    pub fn sqrtf(_X: f32) -> f32;
}
extern "C" {
    pub fn tanf(_X: f32) -> f32;
}
extern "C" {
    pub fn tanhf(_X: f32) -> f32;
}
extern "C" {
    pub fn acoshl(_X: f64) -> f64;
}
extern "C" {
    pub fn asinhl(_X: f64) -> f64;
}
extern "C" {
    pub fn atanhl(_X: f64) -> f64;
}
extern "C" {
    pub fn cbrtl(_X: f64) -> f64;
}
extern "C" {
    pub fn copysignl(_Number: f64, _Sign: f64) -> f64;
}
extern "C" {
    pub fn erfl(_X: f64) -> f64;
}
extern "C" {
    pub fn erfcl(_X: f64) -> f64;
}
extern "C" {
    pub fn exp2l(_X: f64) -> f64;
}
extern "C" {
    pub fn expm1l(_X: f64) -> f64;
}
extern "C" {
    pub fn fdiml(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn fmal(_X: f64, _Y: f64, _Z: f64) -> f64;
}
extern "C" {
    pub fn fmaxl(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn fminl(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn ilogbl(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lgammal(_X: f64) -> f64;
}
extern "C" {
    pub fn llrintl(_X: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundl(_X: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn log1pl(_X: f64) -> f64;
}
extern "C" {
    pub fn log2l(_X: f64) -> f64;
}
extern "C" {
    pub fn logbl(_X: f64) -> f64;
}
extern "C" {
    pub fn lrintl(_X: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lroundl(_X: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nanl(_X: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn nearbyintl(_X: f64) -> f64;
}
extern "C" {
    pub fn nextafterl(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn nexttowardl(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn remainderl(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn remquol(_X: f64, _Y: f64, _Z: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rintl(_X: f64) -> f64;
}
extern "C" {
    pub fn roundl(_X: f64) -> f64;
}
extern "C" {
    pub fn scalblnl(_X: f64, _Y: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn scalbnl(_X: f64, _Y: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn tgammal(_X: f64) -> f64;
}
extern "C" {
    pub fn truncl(_X: f64) -> f64;
}
extern "C" {
    pub static mut HUGE: f64;
}
extern "C" {
    pub fn j0(_X: f64) -> f64;
}
extern "C" {
    pub fn j1(_X: f64) -> f64;
}
extern "C" {
    pub fn jn(_X: ::std::os::raw::c_int, _Y: f64) -> f64;
}
extern "C" {
    pub fn y0(_X: f64) -> f64;
}
extern "C" {
    pub fn y1(_X: f64) -> f64;
}
extern "C" {
    pub fn yn(_X: ::std::os::raw::c_int, _Y: f64) -> f64;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct SPVec2 {
    pub x: f64,
    pub y: f64,
}
#[test]
fn bindgen_test_layout_SPVec2() {
    assert_eq!(
        ::std::mem::size_of::<SPVec2>(),
        16usize,
        concat!("Size of: ", stringify!(SPVec2))
    );
    assert_eq!(
        ::std::mem::align_of::<SPVec2>(),
        8usize,
        concat!("Alignment of ", stringify!(SPVec2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPVec2>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(SPVec2), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPVec2>())).y as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(SPVec2), "::", stringify!(y))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct SPVec3 {
    pub x: f64,
    pub y: f64,
    pub z: f64,
}
#[test]
fn bindgen_test_layout_SPVec3() {
    assert_eq!(
        ::std::mem::size_of::<SPVec3>(),
        24usize,
        concat!("Size of: ", stringify!(SPVec3))
    );
    assert_eq!(
        ::std::mem::align_of::<SPVec3>(),
        8usize,
        concat!("Alignment of ", stringify!(SPVec3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPVec3>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(SPVec3), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPVec3>())).y as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(SPVec3), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPVec3>())).z as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(SPVec3), "::", stringify!(z))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct SPVec4 {
    pub x: f64,
    pub y: f64,
    pub z: f64,
    pub w: f64,
}
#[test]
fn bindgen_test_layout_SPVec4() {
    assert_eq!(
        ::std::mem::size_of::<SPVec4>(),
        32usize,
        concat!("Size of: ", stringify!(SPVec4))
    );
    assert_eq!(
        ::std::mem::align_of::<SPVec4>(),
        8usize,
        concat!("Alignment of ", stringify!(SPVec4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPVec4>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(SPVec4), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPVec4>())).y as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(SPVec4), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPVec4>())).z as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(SPVec4), "::", stringify!(z))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPVec4>())).w as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(SPVec4), "::", stringify!(w))
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct SPMat3 {
    pub m0: f64,
    pub m1: f64,
    pub m2: f64,
    pub m3: f64,
    pub m4: f64,
    pub m5: f64,
    pub m6: f64,
    pub m7: f64,
    pub m8: f64,
}
#[test]
fn bindgen_test_layout_SPMat3() {
    assert_eq!(
        ::std::mem::size_of::<SPMat3>(),
        72usize,
        concat!("Size of: ", stringify!(SPMat3))
    );
    assert_eq!(
        ::std::mem::align_of::<SPMat3>(),
        8usize,
        concat!("Alignment of ", stringify!(SPMat3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPMat3>())).m0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SPMat3),
            "::",
            stringify!(m0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPMat3>())).m1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SPMat3),
            "::",
            stringify!(m1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPMat3>())).m2 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SPMat3),
            "::",
            stringify!(m2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPMat3>())).m3 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SPMat3),
            "::",
            stringify!(m3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPMat3>())).m4 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SPMat3),
            "::",
            stringify!(m4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPMat3>())).m5 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SPMat3),
            "::",
            stringify!(m5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPMat3>())).m6 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SPMat3),
            "::",
            stringify!(m6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPMat3>())).m7 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SPMat3),
            "::",
            stringify!(m7)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPMat3>())).m8 as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SPMat3),
            "::",
            stringify!(m8)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct SPMat4 {
    pub m0: f64,
    pub m1: f64,
    pub m2: f64,
    pub m3: f64,
    pub m4: f64,
    pub m5: f64,
    pub m6: f64,
    pub m7: f64,
    pub m8: f64,
    pub m9: f64,
    pub m10: f64,
    pub m11: f64,
    pub m12: f64,
    pub m13: f64,
    pub m14: f64,
    pub m15: f64,
}
#[test]
fn bindgen_test_layout_SPMat4() {
    assert_eq!(
        ::std::mem::size_of::<SPMat4>(),
        128usize,
        concat!("Size of: ", stringify!(SPMat4))
    );
    assert_eq!(
        ::std::mem::align_of::<SPMat4>(),
        8usize,
        concat!("Alignment of ", stringify!(SPMat4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPMat4>())).m0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SPMat4),
            "::",
            stringify!(m0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPMat4>())).m1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SPMat4),
            "::",
            stringify!(m1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPMat4>())).m2 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SPMat4),
            "::",
            stringify!(m2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPMat4>())).m3 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SPMat4),
            "::",
            stringify!(m3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPMat4>())).m4 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SPMat4),
            "::",
            stringify!(m4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPMat4>())).m5 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SPMat4),
            "::",
            stringify!(m5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPMat4>())).m6 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SPMat4),
            "::",
            stringify!(m6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPMat4>())).m7 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SPMat4),
            "::",
            stringify!(m7)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPMat4>())).m8 as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SPMat4),
            "::",
            stringify!(m8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPMat4>())).m9 as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SPMat4),
            "::",
            stringify!(m9)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPMat4>())).m10 as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SPMat4),
            "::",
            stringify!(m10)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPMat4>())).m11 as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SPMat4),
            "::",
            stringify!(m11)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPMat4>())).m12 as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SPMat4),
            "::",
            stringify!(m12)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPMat4>())).m13 as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(SPMat4),
            "::",
            stringify!(m13)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPMat4>())).m14 as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(SPMat4),
            "::",
            stringify!(m14)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPMat4>())).m15 as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(SPMat4),
            "::",
            stringify!(m15)
        )
    );
}
extern "C" {
    pub static spMat3IdentityMatrix: SPMat3;
}
extern "C" {
    pub fn spMin(x: f64, y: f64) -> f64;
}
extern "C" {
    pub fn spMax(x: f64, y: f64) -> f64;
}
extern "C" {
    pub fn spClamp(x: f64, minVal: f64, maxVal: f64) -> f64;
}
extern "C" {
    pub fn spMix(x: f64, y: f64, a: f64) -> f64;
}
extern "C" {
    pub fn spSmoothStep(edge0: f64, edge1: f64, x: f64) -> f64;
}
extern "C" {
    pub fn spVec2Add(a: SPVec2, b: SPVec2) -> SPVec2;
}
extern "C" {
    pub fn spVec2Sub(a: SPVec2, b: SPVec2) -> SPVec2;
}
extern "C" {
    pub fn spVec2Mul(a: SPVec2, b: f64) -> SPVec2;
}
extern "C" {
    pub fn spVec2Div(a: SPVec2, b: f64) -> SPVec2;
}
extern "C" {
    pub fn spVec2Neg(a: SPVec2) -> SPVec2;
}
extern "C" {
    pub fn spVec3Add(a: SPVec3, b: SPVec3) -> SPVec3;
}
extern "C" {
    pub fn spVec3Sub(a: SPVec3, b: SPVec3) -> SPVec3;
}
extern "C" {
    pub fn spVec3Mul(a: SPVec3, b: f64) -> SPVec3;
}
extern "C" {
    pub fn spVec3Div(a: SPVec3, b: f64) -> SPVec3;
}
extern "C" {
    pub fn spVec3Neg(a: SPVec3) -> SPVec3;
}
extern "C" {
    pub fn spVec4Add(a: SPVec4, b: SPVec4) -> SPVec4;
}
extern "C" {
    pub fn spVec4Sub(a: SPVec4, b: SPVec4) -> SPVec4;
}
extern "C" {
    pub fn spVec4Mul(a: SPVec4, b: f64) -> SPVec4;
}
extern "C" {
    pub fn spVec4Div(a: SPVec4, b: f64) -> SPVec4;
}
extern "C" {
    pub fn spVec4Neg(a: SPVec4) -> SPVec4;
}
extern "C" {
    pub fn spVec3Normalize(v: SPVec3) -> SPVec3;
}
extern "C" {
    pub fn spVec3Dot(a: SPVec3, b: SPVec3) -> f64;
}
extern "C" {
    pub fn spVec3Cross(a: SPVec3, b: SPVec3) -> SPVec3;
}
extern "C" {
    pub fn spVec3Length(v: SPVec3) -> f64;
}
extern "C" {
    pub fn spVec3Length2(v: SPVec3) -> f64;
}
extern "C" {
    pub fn spVec3Distance(a: SPVec3, b: SPVec3) -> f64;
}
extern "C" {
    pub fn spVec3Distance2(a: SPVec3, b: SPVec3) -> f64;
}
extern "C" {
    pub fn spVec3xMat3(v: SPVec3, m: SPMat3) -> SPVec3;
}
extern "C" {
    pub fn spQuatCast(m: *mut SPMat3) -> SPVec4;
}
extern "C" {
    pub fn spMat3Cast(qP: *mut SPVec4, result: *mut SPMat3);
}
extern "C" {
    pub fn spQuatSlerp(a: SPVec4, b: SPVec4, x: f64) -> SPVec4;
}
extern "C" {
    pub fn spMat3Identity() -> SPMat3;
}
extern "C" {
    pub fn spMat3Rotate(m: SPMat3, angle: f64, axis: SPVec3) -> SPMat3;
}
extern "C" {
    pub fn spMat3Inverse(m: SPMat3) -> SPMat3;
}
extern "C" {
    pub fn spMat3Multiply(a: SPMat3, b: SPMat3) -> SPMat3;
}
extern "C" {
    pub fn spMat3Slerp(a: SPMat3, b: SPMat3, fraction: f64) -> SPMat3;
}
extern "C" {
    pub fn spMat3GetRow(m: SPMat3, rowIndex: ::std::os::raw::c_int) -> SPVec3;
}
extern "C" {
    pub fn spMat3FromVec3s(a: SPVec3, b: SPVec3, c: SPVec3) -> SPMat3;
}
extern "C" {
    pub fn spMat3LookAtInverse(look: SPVec3, up: SPVec3) -> SPMat3;
}
extern "C" {
    pub fn spMat3RotatePtr(m: *mut SPMat3, angle: f64, axis: *mut SPVec3, result: *mut SPMat3);
}
extern "C" {
    pub fn spMat3LookAtInversePtr(look: *mut SPVec3, up: *mut SPVec3, result: *mut SPMat3);
}
extern "C" {
    pub fn spMat3InversePtr(m: *mut SPMat3, result: *mut SPMat3);
}
extern "C" {
    pub fn spMat3SlerpPtr(a: *mut SPMat3, b: *mut SPMat3, fraction: f64, result: *mut SPMat3);
}
extern "C" {
    pub fn spPointIsLeftOfLine(p1: SPVec3, a: SPVec3, b: SPVec3) -> bool;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct SPWorldGenOptions {
    pub heightOffset: f64,
    pub rainfallMultiplier: f64,
    pub temperatureOffset: f64,
    pub scales: SPVec3,
    pub influences: SPVec3,
}
#[test]
fn bindgen_test_layout_SPWorldGenOptions() {
    assert_eq!(
        ::std::mem::size_of::<SPWorldGenOptions>(),
        72usize,
        concat!("Size of: ", stringify!(SPWorldGenOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<SPWorldGenOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(SPWorldGenOptions))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPWorldGenOptions>())).heightOffset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SPWorldGenOptions),
            "::",
            stringify!(heightOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SPWorldGenOptions>())).rainfallMultiplier as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SPWorldGenOptions),
            "::",
            stringify!(rainfallMultiplier)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SPWorldGenOptions>())).temperatureOffset as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SPWorldGenOptions),
            "::",
            stringify!(temperatureOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPWorldGenOptions>())).scales as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SPWorldGenOptions),
            "::",
            stringify!(scales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPWorldGenOptions>())).influences as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SPWorldGenOptions),
            "::",
            stringify!(influences)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct SPBiomeType {
    pub normalTerrainType: i16,
    pub secondaryTerrainType: i16,
    pub rockTerrainType: i16,
    pub beachTerrainType: i16,
    pub vegetationStrippedTerrainType: i16,
    pub _padding: [i16; 3usize],
}
#[test]
fn bindgen_test_layout_SPBiomeType() {
    assert_eq!(
        ::std::mem::size_of::<SPBiomeType>(),
        16usize,
        concat!("Size of: ", stringify!(SPBiomeType))
    );
    assert_eq!(
        ::std::mem::align_of::<SPBiomeType>(),
        2usize,
        concat!("Alignment of ", stringify!(SPBiomeType))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPBiomeType>())).normalTerrainType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SPBiomeType),
            "::",
            stringify!(normalTerrainType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SPBiomeType>())).secondaryTerrainType as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(SPBiomeType),
            "::",
            stringify!(secondaryTerrainType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPBiomeType>())).rockTerrainType as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SPBiomeType),
            "::",
            stringify!(rockTerrainType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPBiomeType>())).beachTerrainType as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(SPBiomeType),
            "::",
            stringify!(beachTerrainType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SPBiomeType>())).vegetationStrippedTerrainType as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SPBiomeType),
            "::",
            stringify!(vegetationStrippedTerrainType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPBiomeType>()))._padding as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(SPBiomeType),
            "::",
            stringify!(_padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SPNoise {
    _unused: [u8; 0],
}
extern "C" {
    pub fn spNoiseNew(seed: ::std::os::raw::c_int, persistance: f64) -> *mut SPNoise;
}
extern "C" {
    pub fn spNoiseDelete(noise: *mut SPNoise);
}
extern "C" {
    pub fn spNoiseGet(noise: *mut SPNoise, vec: SPVec3, endOctave: ::std::os::raw::c_int) -> f64;
}
pub type SPBiomeGetBiomeTypeFunc = ::std::option::Option<
    unsafe extern "C" fn(climateType: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn spBiomeGetBiomeType(climateType: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type SPBiomeGetSurfaceTypeFunc = ::std::option::Option<
    unsafe extern "C" fn(
        noise: *mut SPNoise,
        biomeTypes: *mut SPBiomeType,
        pointNormal: SPVec3,
        noiseLoc: SPVec3,
        biomeType: ::std::os::raw::c_int,
        vegetationState: ::std::os::raw::c_int,
        altitude: f64,
        steepness: f32,
        riverDistance: f32,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn spBiomeGetSurfaceType(
        noise: *mut SPNoise,
        biomeTypes: *mut SPBiomeType,
        pointNormal: SPVec3,
        noiseLoc: SPVec3,
        biomeType: ::std::os::raw::c_int,
        vegetationState: ::std::os::raw::c_int,
        altitude: f64,
        steepness: f32,
        riverDistance: f32,
    ) -> ::std::os::raw::c_int;
}
pub type SPClimateGetFunc = ::std::option::Option<
    unsafe extern "C" fn(
        temperatureSummer: f32,
        temperatureWinter: f32,
        rainfallSummer: f32,
        rainfallWinter: f32,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn spClimateGet(
        temperatureSummer: f32,
        temperatureWinter: f32,
        rainfallSummer: f32,
        rainfallWinter: f32,
    ) -> ::std::os::raw::c_int;
}
pub type SPHeightGetFunc = ::std::option::Option<
    unsafe extern "C" fn(
        noise1: *mut SPNoise,
        noise2: *mut SPNoise,
        pointNormal: SPVec3,
        noiseLoc: SPVec3,
        worldGenOptions: SPWorldGenOptions,
        riverValue: f64,
        riverDistance: f64,
    ) -> SPVec4,
>;
extern "C" {
    pub fn spHeightGet(
        noise1: *mut SPNoise,
        noise2: *mut SPNoise,
        pointNormal: SPVec3,
        noiseLoc: SPVec3,
        worldGenOptions: SPWorldGenOptions,
        riverValue: f64,
        riverDistance: f64,
    ) -> SPVec4;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SPRand {
    _unused: [u8; 0],
}
extern "C" {
    pub fn spRandNew(seed: u32) -> *mut SPRand;
}
extern "C" {
    pub fn spRandDelete(spRand: *mut SPRand);
}
extern "C" {
    pub fn spRandGetVec3(spRand: *mut SPRand) -> SPVec3;
}
extern "C" {
    pub fn spRandGetValue(spRand: *mut SPRand) -> f64;
}
pub const SPRenderGroupVertexDescriptionType_SPRenderGroupVertexDescriptionType_float:
    SPRenderGroupVertexDescriptionType = 0;
pub const SPRenderGroupVertexDescriptionType_SPRenderGroupVertexDescriptionType_vec2:
    SPRenderGroupVertexDescriptionType = 1;
pub const SPRenderGroupVertexDescriptionType_SPRenderGroupVertexDescriptionType_vec3:
    SPRenderGroupVertexDescriptionType = 2;
pub const SPRenderGroupVertexDescriptionType_SPRenderGroupVertexDescriptionType_vec4:
    SPRenderGroupVertexDescriptionType = 3;
pub type SPRenderGroupVertexDescriptionType = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct SPParticleRenderGroupInfo {
    pub shaderName: *mut ::std::os::raw::c_char,
    pub localID: u32,
    pub vertexDescriptionTypeCount: ::std::os::raw::c_int,
    pub vertexDescriptionTypes: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_SPParticleRenderGroupInfo() {
    assert_eq!(
        ::std::mem::size_of::<SPParticleRenderGroupInfo>(),
        24usize,
        concat!("Size of: ", stringify!(SPParticleRenderGroupInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<SPParticleRenderGroupInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(SPParticleRenderGroupInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SPParticleRenderGroupInfo>())).shaderName as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SPParticleRenderGroupInfo),
            "::",
            stringify!(shaderName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SPParticleRenderGroupInfo>())).localID as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SPParticleRenderGroupInfo),
            "::",
            stringify!(localID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SPParticleRenderGroupInfo>())).vertexDescriptionTypeCount
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SPParticleRenderGroupInfo),
            "::",
            stringify!(vertexDescriptionTypeCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SPParticleRenderGroupInfo>())).vertexDescriptionTypes as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SPParticleRenderGroupInfo),
            "::",
            stringify!(vertexDescriptionTypes)
        )
    );
}
impl Default for SPParticleRenderGroupInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct SPParticleEmitterTypeInfo {
    pub name: *mut ::std::os::raw::c_char,
    pub localID: u32,
}
#[test]
fn bindgen_test_layout_SPParticleEmitterTypeInfo() {
    assert_eq!(
        ::std::mem::size_of::<SPParticleEmitterTypeInfo>(),
        16usize,
        concat!("Size of: ", stringify!(SPParticleEmitterTypeInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<SPParticleEmitterTypeInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(SPParticleEmitterTypeInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPParticleEmitterTypeInfo>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SPParticleEmitterTypeInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SPParticleEmitterTypeInfo>())).localID as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SPParticleEmitterTypeInfo),
            "::",
            stringify!(localID)
        )
    );
}
impl Default for SPParticleEmitterTypeInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct SPParticleEmitterState {
    pub p: SPVec3,
    pub rot: SPMat3,
    pub timeAccumulatorA: f64,
    pub timeAccumulatorB: f64,
    pub userData: SPVec4,
    pub globalType: u32,
    pub counters: [u8; 4usize],
}
#[test]
fn bindgen_test_layout_SPParticleEmitterState() {
    assert_eq!(
        ::std::mem::size_of::<SPParticleEmitterState>(),
        152usize,
        concat!("Size of: ", stringify!(SPParticleEmitterState))
    );
    assert_eq!(
        ::std::mem::align_of::<SPParticleEmitterState>(),
        8usize,
        concat!("Alignment of ", stringify!(SPParticleEmitterState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPParticleEmitterState>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SPParticleEmitterState),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPParticleEmitterState>())).rot as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SPParticleEmitterState),
            "::",
            stringify!(rot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SPParticleEmitterState>())).timeAccumulatorA as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SPParticleEmitterState),
            "::",
            stringify!(timeAccumulatorA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SPParticleEmitterState>())).timeAccumulatorB as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(SPParticleEmitterState),
            "::",
            stringify!(timeAccumulatorB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPParticleEmitterState>())).userData as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(SPParticleEmitterState),
            "::",
            stringify!(userData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SPParticleEmitterState>())).globalType as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(SPParticleEmitterState),
            "::",
            stringify!(globalType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPParticleEmitterState>())).counters as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(SPParticleEmitterState),
            "::",
            stringify!(counters)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct SPParticleState {
    pub p: SPVec3,
    pub v: SPVec3,
    pub gravity: SPVec3,
    pub lifeLeft: f64,
    pub scale: f64,
    pub randomValueA: f64,
    pub randomValueB: f64,
    pub userData: SPVec4,
    pub particleTextureType: u32,
}
#[test]
fn bindgen_test_layout_SPParticleState() {
    assert_eq!(
        ::std::mem::size_of::<SPParticleState>(),
        144usize,
        concat!("Size of: ", stringify!(SPParticleState))
    );
    assert_eq!(
        ::std::mem::align_of::<SPParticleState>(),
        8usize,
        concat!("Alignment of ", stringify!(SPParticleState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPParticleState>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SPParticleState),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPParticleState>())).v as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SPParticleState),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPParticleState>())).gravity as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SPParticleState),
            "::",
            stringify!(gravity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPParticleState>())).lifeLeft as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SPParticleState),
            "::",
            stringify!(lifeLeft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPParticleState>())).scale as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SPParticleState),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPParticleState>())).randomValueA as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SPParticleState),
            "::",
            stringify!(randomValueA)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPParticleState>())).randomValueB as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SPParticleState),
            "::",
            stringify!(randomValueB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPParticleState>())).userData as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(SPParticleState),
            "::",
            stringify!(userData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SPParticleState>())).particleTextureType as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(SPParticleState),
            "::",
            stringify!(particleTextureType)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct SPParticleThreadState {
    pub particleManager: *mut ::std::os::raw::c_void,
    pub addParticle: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut SPParticleEmitterState,
            arg3: u32,
            arg4: *mut SPParticleState,
        ),
    >,
    pub spRand: *mut SPRand,
    pub spNoise: *mut SPNoise,
}
#[test]
fn bindgen_test_layout_SPParticleThreadState() {
    assert_eq!(
        ::std::mem::size_of::<SPParticleThreadState>(),
        32usize,
        concat!("Size of: ", stringify!(SPParticleThreadState))
    );
    assert_eq!(
        ::std::mem::align_of::<SPParticleThreadState>(),
        8usize,
        concat!("Alignment of ", stringify!(SPParticleThreadState))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SPParticleThreadState>())).particleManager as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SPParticleThreadState),
            "::",
            stringify!(particleManager)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SPParticleThreadState>())).addParticle as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SPParticleThreadState),
            "::",
            stringify!(addParticle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPParticleThreadState>())).spRand as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SPParticleThreadState),
            "::",
            stringify!(spRand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SPParticleThreadState>())).spNoise as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SPParticleThreadState),
            "::",
            stringify!(spNoise)
        )
    );
}
impl Default for SPParticleThreadState {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type SPGetEmitterTypesCountFunc =
    ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
extern "C" {
    pub fn spGetEmitterTypesCount() -> ::std::os::raw::c_int;
}
pub type SPGetEmitterTypesFunc =
    ::std::option::Option<unsafe extern "C" fn() -> *mut SPParticleEmitterTypeInfo>;
extern "C" {
    pub fn spGetEmitterTypes() -> *mut SPParticleEmitterTypeInfo;
}
pub type SPGetRenderGroupTypesCountFunc =
    ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
extern "C" {
    pub fn spGetRenderGroupTypesCount() -> ::std::os::raw::c_int;
}
pub type SPGetRenderGroupTypesFunc =
    ::std::option::Option<unsafe extern "C" fn() -> *mut SPParticleRenderGroupInfo>;
extern "C" {
    pub fn spGetRenderGroupTypes() -> *mut SPParticleRenderGroupInfo;
}
pub type SPEmitterWasAddedFunc = ::std::option::Option<
    unsafe extern "C" fn(
        threadState: *mut SPParticleThreadState,
        emitterState: *mut SPParticleEmitterState,
        localEmitterTypeID: u32,
    ) -> bool,
>;
extern "C" {
    pub fn spEmitterWasAdded(
        threadState: *mut SPParticleThreadState,
        emitterState: *mut SPParticleEmitterState,
        localEmitterTypeID: u32,
    ) -> bool;
}
pub type SPUpdateEmitterFunc = ::std::option::Option<
    unsafe extern "C" fn(
        threadState: *mut SPParticleThreadState,
        emitterState: *mut SPParticleEmitterState,
        localEmitterTypeID: u32,
        dt: f64,
    ),
>;
extern "C" {
    pub fn spUpdateEmitter(
        threadState: *mut SPParticleThreadState,
        emitterState: *mut SPParticleEmitterState,
        localEmitterTypeID: u32,
        dt: f64,
    );
}
pub type SPUpdateParticleFunc = ::std::option::Option<
    unsafe extern "C" fn(
        threadState: *mut SPParticleThreadState,
        particleState: *mut SPParticleState,
        localRenderGroupTypeID: u32,
        dt: f64,
        origin: SPVec3,
        renderBuffer: *mut f32,
    ) -> bool,
>;
extern "C" {
    pub fn spUpdateParticle(
        threadState: *mut SPParticleThreadState,
        particleState: *mut SPParticleState,
        localRenderGroupTypeID: u32,
        dt: f64,
        origin: SPVec3,
        renderBuffer: *mut f32,
    ) -> bool;
}
pub type SPRainfallGetFunc = ::std::option::Option<
    unsafe extern "C" fn(
        noise: *mut SPNoise,
        pointNormal: SPVec3,
        noiseLoc: SPVec3,
        worldGenOptions: SPWorldGenOptions,
        riverDistance: f64,
        pregenRainfall0: f64,
        pregenRainfall1: f64,
        outRainfall0: *mut f64,
        outRainfall1: *mut f64,
    ),
>;
extern "C" {
    pub fn spRainfallGet(
        noise: *mut SPNoise,
        pointNormal: SPVec3,
        noiseLoc: SPVec3,
        worldGenOptions: SPWorldGenOptions,
        riverDistance: f64,
        pregenRainfall0: f64,
        pregenRainfall1: f64,
        outRainfall0: *mut f64,
        outRainfall1: *mut f64,
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
